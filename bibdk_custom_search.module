<?php

/**
 * @file
 * Bring customizations to the default search box
 */

/*
 *  TO DO: wildcard matching on search page path
 *  TO DO: CSS
 *  TO DO: value submenus
 *  TO DO: element input combinations
 */

/**
 * Includes
 */
// module_load_include('inc', 'bibdk_custom_search', 'includes/forms');

/**
 * Implements hook_menu().
 */
function bibdk_custom_search_menu() {
  $items['admin/config/search/bibdk_custom_search'] = array(
    'title'             => 'bibdk search pages',
    'description'       => 'Customize the default search, add custom search pages, and change labels, values & ordering.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_admin'),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/settings'] = array(
    'title'             => 'Pages',
    'description'       => 'Create, alter or delete search pages.',
    'access arguments'  => array('administer bibdk search pages'),
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => 0,
  );
  $items['admin/config/search/bibdk_custom_search/%/edit'] = array(
    'title'             => 'Edit search page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_page_edit', 4),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/%/remove_element/%'] = array(
    'title'             => 'Edit search page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_page_edit', 4,6),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/%/delete'] = array(
    'title'             => 'Edit search page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_delete_page', 4),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements'] = array(
    'title'             => 'Elements',
    'description'       => 'Create, alter or delete search options in the search block.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_elements_admin'),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.elements.admin.inc',
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 1,
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/edit'] = array(
    'title'             => 'Edit search element',
    'description'       => 'Edit and add values to a search element.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_element_edit',5),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/remove_value/%'] = array(
    'title'             => 'Edit search element',
    'description'       => 'Edit and add values to a search element.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_element_edit',5,7),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/delete'] = array(
    'title'             => 'Delete search element',
    'description'       => 'Delete a search element.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_element_delete',5),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values'] = array(
    'title'             => 'Values',
    'description'       => 'Create, alter or delete search element values.',
    'page arguments'    => array('bibdk_custom_search_values_admin'),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.values.admin.inc',
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 4,
  );
  $items['admin/config/search/bibdk_custom_search/values/%/edit'] = array(
    'title'             => 'Edit search value',
    'description'       => 'Edit and add values to a search value.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_value_edit',5),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.values.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values/%/delete'] = array(
    'title'             => 'Delete search value',
    'description'       => 'Delete a search value.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_value_delete',5),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.values.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values/%/delete_option/%'] = array(
    'title'             => 'Delete search value',
    'description'       => 'Delete a search value.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_value_edit',5,7),
    'access arguments'  => array('administer bibdk search pages'),
    'file'              => 'bibdk_custom_search.values.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bibdk_custom_search_permission() {
  return array(
    'Administer bibdk search pages' => array(
      'title'       => t('administer bibdk search pages'),
      'description' => t('Allow users to administer bibdk search pages settings')
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
/*
  function bibdk_custom_search_form_alter(&$form, &$form_state, $form_id) {
    $form['#submit'][] = 'bibdk_custom_search_submit';
  }
*/

/**
 * Alter the search to respect the search modes selected.
 */
/*
  function bibdk_custom_search_submit($form, &$form_state) {
  }
*/

/**
 * @brief Implementation of hook_form_FORM_ID_alter() for form search_block_form.
 */
function bibdk_custom_search_form_search_block_form_alter(&$form, &$form_state, $form_id) {

  $advanced_fields = _bibdk_custom_search_get_fields();

/*
  // Parse extended search query parameters.
  if (arg(0) == 'search') {
    $parts = explode('/', $_GET['q']);
    // Lose 'search' and the search type.
    array_shift($parts);
    $type = array_shift($parts);
    $search_query = implode('/', $parts);
    $indexes = ting_search_extract_keys($search_query, array_keys($advanced_fields));
    $search_query = $indexes['q'];
    unset($indexes['q']);
    if ($type != 'ting' and !empty($indexes)) {
      $search_query .= " " . implode(' ', $indexes);
      $indexes = array();
      $advanced = FALSE;
    }

    $form['search_block_form']['#default_value'] = $search_query;
  }
*/

/*
  $form['sort'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['sort']) ? check_plain($_GET['sort']) : FALSE,
    '#attributes' => array('id' => 'controls_search_sort'),
  );

  $form['size'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['size']) ? (int)$_GET['size'] : FALSE,
    '#attributes' => array('id' => 'controls_search_size'),
  );
*/

  if ( $advanced_fields ) {

/*
    $form['main'] = array(
      '#type' => 'fieldset',
      '#title' => $advanced_fields['#main_search_name'],
      '#title_display'  => 'invisible',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 101,
      '#attached' => array(),
    );

    $form['main']['search_block_form'] = $form['search_block_form'];
    $form['main']['actions'] = $form['actions'];
    unset($form['search_block_form']);
    unset($form['actions']);
*/

    $form['expand'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => ( $advanced_fields['#collapsed'] ) ? $advanced_fields['#collapsed'] : FALSE,
      '#weight' => 102,
    );

    $form['#attached'] = array(
      'css' => array(
        drupal_get_path('module', 'bibdk_custom_search') . '/bibdk_custom_search.css',
      ),
      'js' => array(
        drupal_get_path('module', 'bibdk_custom_search') . '/js/bibdk_custom_search_options_subgroup.js',
      )
    );

    foreach ($advanced_fields as $name => $field) {
      if ( is_array($field) ) {
        if ( $field['#region'] == 'main' ) {
          $form[$name] = $field;
        } else {
          $form[ $field['#region'] ][$name] = $field;
        }
      }
    }

  }

  $form['#submit'] = array('bibdk_custom_search_submit');

  return $form;
}


/**
 * Implements hook_theme().
 */
function bibdk_custom_search_theme() {
  $path = drupal_get_path('module', 'bibdk_custom_search') . '/theme';
  $bibdk_custom_search_theme_array = array(
    'bibdk_custom_search-sort-pages-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-pages-form',
    ),
    'bibdk_custom_search-edit-page-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-page-form',
    ),
    'bibdk_custom_search-edit-page-elements-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-region-form',
    ),
    'bibdk_custom_search-list-elements-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-elements-form',
    ),
    'bibdk_custom_search-edit-element-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-element-form',
    ),
    'bibdk_custom_search-edit-element-values-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-element-values-form',
    ),
    'bibdk_custom_search-list-values-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-values-form',
    ),
    'bibdk_custom_search-edit-value-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-value-form',
    ),
    'bibdk_custom_search-list-options-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-options-form',
    ),

    'bibdk_search_element' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-search-element-form',
    ),
  );

  return $bibdk_custom_search_theme_array;
}



/**
 * Process a block search form submission.
 */
function bibdk_custom_search_submit($form, &$form_state) {

  $controls = array();
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $form_id = $form['form_id']['#value']; // 'search_block_form'
  $keys = $form_state['values'][$form_id];
  $fields = array();

  $extended_fields = _bibdk_custom_search_get_field_searchcodes();
  foreach ( $extended_fields as $name => $index ) {
    if ( !empty($form_state['values'][$name]) ) {
      $value = $form_state['values'][$name];
      if ( $index ) {
        // search code is defined in 'search page values'
        if ( !is_array($value) ) {
          $fields[] = $index . '=' . (strpos($value, ' ') ? '"' . $value . '"' : $value);
        } else {
          // handle checkboxes & select multiple
          $checkbox_fields = array();
          foreach ( $value as $n => $val ) {
            if ( isset($val) && $val ) {
              $checkbox_fields[] = $index . '=' . (strpos($val, ' ') ? '"' . $val . '"' : $val);
            }
          }
          if (!empty($checkbox_fields)) {
            $fields[] = '(' . implode(' OR ', $checkbox_fields) . ')';
          }
        }
      } else {
        // search code and value are defined as [searchcode=value] in the form value.
        if ( !is_array($value) ) {
          if ( strpos($value, '=') ) {
            $set = explode('=',$value);
            $fields[] = $set[0] . '=' . (strpos($set[1], ' ') ? '"' . $set[1] . '"' : $set[1]);
          }
        } else {
          // handle checkboxes & select multiple
          $checkbox_fields = array();
          foreach ( $value as $n => $val ) {
            $set = explode('=',$val);
            if ( isset($set[1]) && $set[1] ) {
              $checkbox_fields[] = $set[0] . '=' . (strpos($set[1], ' ') ? '"' . $set[1] . '"' : $set[1]);
            }
          }
          if (!empty($checkbox_fields)) {
            $fields[] = '(' . implode(' OR ', $checkbox_fields) . ')';
          }
        }
      }
    }
  }

  if ( $delimiter = $form_state['values']['delimiter'] ) {
    if ( $delimiter != "" ) {
      $fields[] = $delimiter;
    }
  }

  $q = array();
  if (!empty($keys)) {
    $q[] = $keys;
  }

  if (!empty($fields)) {
    $q[] = '(' . implode(' AND ', $fields) . ')';
  }
  $q = join(' AND ', $q);

  $s = $form_state['values']['sort'];
  if ( $s != "" ) {
    $controls['sort'] = $s;
  }

  $s = $form_state['values']['size'];
  if ( $s != "" ) {
    $controls['size'] = $s;
  }

  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if ($q == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }
  $search_info = array();
  $request_path = arg();

  if ($request_path[0] != 'search' || !isset($request_path[1])) {
    $search_info = search_get_default_module_info();
  }
  else {
    foreach (search_get_info() as $search_engine) {
      if ($search_engine['path'] == $request_path[1]) {
        $search_info = $search_engine;
        break;
      }
    }
  }
  if (!empty($search_info['path']) && in_array($search_info['module'], variable_get('search_active_modules', array()))) {
    $form_state['redirect'] = FALSE;
    $url = 'search/' . $search_info['path']. '/' . trim($q);
    drupal_goto($url, array('query' => $controls));
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.'), 'error');
  }
}



/**
 * get form fields from database.
 */
function _bibdk_custom_search_get_fields() {

  $path = drupal_get_destination();

  // bibdk_custom_search
  $page = db_select('bibdk_custom_search', 'p')
    ->fields('p')
    ->condition('page_path', $path['destination'],'=')
    ->execute()
    ->fetchAssoc();

  if ( !$page ) {
    return false;
  }

  $cache_id = 'bibdk_custom_search_fields_' . str_replace('/','_',$path['destination']);

  if ($cache = cache_get($cache_id)) {

    $form = $cache->data;

  } else {

    // bibdk_custom_search_elements
    $query = db_select('bibdk_custom_search', 's');
    $query -> leftjoin('bibdk_custom_search_map_elements', 'me', 's.pid = me.pid');
    $query -> join('bibdk_custom_search_elements', 'e', 'me.eid = e.eid');
    $query -> leftjoin('bibdk_custom_search_map_values', 'mv', 'e.eid = mv.eid');
    $query -> join('bibdk_custom_search_values', 'v', 'mv.vid = v.vid');
    $query -> leftjoin('bibdk_custom_search_options', 'o', 'v.vid = o.vid');
    $query -> fields('me', array('region','sort'));
    $query -> fields('e', array('eid','element_label','description','help_text','access_key','tab_index'));
    $query -> fields('mv', array('sort'));
    $query -> fields('v', array('vid','value_title','type','search_code','default_value'));
    $query -> fields('o', array('oid','sort','label','value','expand'));
    $query -> condition('s.pid', $page['pid'],'=');
    $query -> orderBy('me.sort', 'ASC');
    $query -> orderBy('region', 'ASC');
    $query -> orderBy('mv.sort', 'ASC');
    $query -> orderBy('o.sort', 'ASC');
    $result = $query -> execute();

    $elements = array();

    foreach ($result as $record) {

      $eid = check_plain($record->eid);
      $vid = check_plain($record->vid);
      $oid = check_plain($record->oid);

      if ( $eid && !isset($elements[$eid]) ) {
        $elements[ $eid ] = array(
          'element_label' => check_plain($record->element_label),
          'description'   => check_plain($record->description),
          'region'        => check_plain($record->region),
          'help_text'     => check_plain($record->help_text),
          'access_key'    => check_plain($record->access_key),
          'tab_index'     => check_plain($record->tab_index),
        );
      }

      if ( $vid && !isset($elements[$eid]['values'][$vid]) ) {
        $elements[ $eid ]['values'][ $vid ] = array(
          'value_title'   => check_plain($record->value_title),
          'type'          => check_plain($record->type),
          'search_code'   => check_plain($record->search_code),
          'default_value' => check_plain($record->default_value),
        );
      }

      if ( $oid ) {
        $elements[ $eid ]['values'][ $vid ]['options'][ check_plain($record->value) ] = check_plain($record->label);
      }

      if ( $oid && $record->expand ) {
        $options = array();
        $subgroup = array();
        if ( !isset($elements[ $eid ]['values'][ $vid ]['options']) ) $elements[ $eid ]['values'][ $vid ]['options'] = array();
        if ( !isset($elements[ $eid ]['values'][ $vid ]['attached']) ) $elements[ $eid ]['values'][ $vid ]['attached'] = array();
        _bibdk_custom_search_get_options( $oid, check_plain($record->value), check_plain($record->expand), $options, $subgroup );
        $elements[ $eid ]['values'][ $vid ]['options'] = array_merge( $elements[ $eid ]['values'][ $vid ]['options'], $options);
        $elements[ $eid ]['values'][ $vid ]['attached'] = array_merge( $elements[ $eid ]['values'][ $vid ]['attached'], $subgroup);
      }
    }

    $form = array();
    foreach ($elements as $key => $element) {
      $form['bibdk_custom_search_element_' . $key] = array(
        '#type'         => 'fieldset',
        '#collapsible'  => FALSE,
        '#collapsed'    => FALSE,
        '#tree'         => FALSE,
        '#title'        => $element['element_label'],
        '#description'  => $element['description'],
        '#region'       => $element['region'],
        '#theme'        => 'bibdk_search_element',
        '#help_text'    => $element['help_text'],
      );
      foreach ($element['values'] as $vid => $value) {
        $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ] = array(
          '#type'           => $value['type'],
          '#title'          => $value['value_title'],
          '#title_display'  => 'invisible',
          '#default_value'  => $value['default_value'],
          '#attributes'     => array('tabindex' => array($element['tab_index']),'accesskey' => array($element['access_key'])),
        );
        switch ( $value['type'] ) {
          CASE 'hidden':
          CASE 'textfield':
          CASE 'textarea':
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#size'] = 30;
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#maxlength'] = 64;
            break;
          CASE 'select':
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#default_value'] = array($value['default_value']);
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#options'] = $value['options'];
            break;
          CASE 'radios':
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#options'] = $value['options'];
            break;
          CASE 'checkboxes':
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#default_value'] = array($value['default_value']);
            $form['bibdk_custom_search_element_' . $key][ 'term' . $vid ]['#options'] = $value['options'];
            break;
          DEFAULT:
            break;
        }
        if ( isset($value['attached']) ) {
          $form['bibdk_custom_search_element_' . $key]['#attached']['js'][] = array(
            'data' => array('expanded' => array($vid => $value['attached'])),
            'type' => 'setting',
          );
        }
      }
    }

    if ( $page['delimiter'] ) {
      $form['delimiter'] = array(
        '#type'   => 'hidden',
        '#region' => 'main',
        '#value'  => $page['delimiter'],
      );
    }

    $form['#collapsed'] = ( $page['expand'] ) ? $page['expand'] : FALSE;

    $form['#main_search_name'] = ( $page['page_title'] ) ? $page['page_title'] : FALSE;

    cache_set($cache_id, $form, 'cache');

  }

  return $form;

}


/**
 *
 */
function _bibdk_custom_search_get_options( $oid, $value, $vid, &$options, &$subgroup) {

  $subgroup[$vid]['parentElem'] = check_plain($value);
  $subgroup[$vid]['parentElemId'] = $vid;

  $expand = _bibdk_custom_search_get_options_db( check_plain($vid) );

  foreach ($expand as $option) {
    if ( $option['expand'] ) {
      _bibdk_custom_search_get_options( $option['oid'], $option['value'],  $option['expand'], $options, $subgroup);
    }
    $options[ $option['value'] ] = $option['label'];
    $subgroup[$vid]['childElem'][ $option['oid'] ] = $option['value'];
  }

}


/**
 *
 */
function _bibdk_custom_search_get_options_db($value_id) {
  /* TO DO: caching */
  $options = array();

  $query = db_select('bibdk_custom_search_options', 'o');
  $query
    ->fields('o', array('oid','label','value','expand','sort'))
    ->condition('vid', $value_id,'=')
    ->orderBy('sort', 'ASC');
  $result = $query->execute();

  foreach ($result as $option) {
    $row = array(
      'oid' => check_plain($option->oid),
      'label' => check_plain($option->label),
      'value' => check_plain($option->value),
      'expand' => check_plain($option->expand),
      'sort' => check_plain($option->sort),
    );
    $options[] = $row;
  }
  return $options;
}


/**
 * get form fields and search codes from database.
 */
function _bibdk_custom_search_get_field_searchcodes() {

  $fields = &drupal_static(__FUNCTION__);

  if (!isset($fields)) {

    if ($cache = cache_get('bibdk_custom_search_field_searchcodes')) {

      $fields = $cache->data;

    } else {

      $query = db_select('bibdk_custom_search_values', 'v');
      $query -> fields('v', array('vid','value_title','type','search_code','default_value'));
      $result = $query -> execute();

      $fields = array();
      foreach ($result as $record) {
        $fields[ 'term' . check_plain($record->vid) ] = check_plain($record->search_code);
      }

      cache_set('bibdk_custom_search_field_searchcodes', $fields, 'cache');

    }
  }

  return $fields;

}

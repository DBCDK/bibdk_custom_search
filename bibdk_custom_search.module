<?php

/**
 * @file
 * Bring customizations to the default search box
 */


require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.export.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.list.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.db_queries.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.advanced_form.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.conditions.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.conditions.bib_open_format.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.conditions.ting_openformat.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.usersettings.inc');
require_once(drupal_get_path('module', 'bibdk_custom_search') . '/includes/bibdk_custom_search.blocks.inc');


/**
 * Implements hook_menu().
 */
function bibdk_custom_search_menu() {

  $items['bibdk_custom_search/ajax/list/%/%/%'] = array(
    'title' => 'AJAX MENU ITEM',
    'type' => MENU_CALLBACK,
    'page arguments' => array(3, 4, 5),
    'page callback' => "bibdk_custom_search_list_ajax_callback",
    'file' => 'includes/bibdk_custom_search.list.inc',
    'access arguments' => array('access content'),
  );

  $items['bibdk_custom_search/ajax/get_search_panel'] = array(
    'title' => 'Get the search panel by AJAX',
    'type' => MENU_CALLBACK,
    'page callback' => 'bibdk_custom_search_get_advanced_search_panel',
    'file' => 'includes/bibdk_custom_search.ajax.inc',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('access content'),
  );

  $items['admin/config/search/bibdk_custom_search'] = array(
    'title' => 'bibdk search pages',
    'description' => 'Customize the default search, add custom search pages, and change labels, values & ordering.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_admin'),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.pages.admin.inc',
  );

  $items['admin/config/search/bibdk_custom_search/settings'] = array(
    'title' => 'Pages',
    'description' => 'Create, alter or delete search pages.',
    'access arguments' => array('administer bibdk custom search pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/search/bibdk_custom_search/%/edit'] = array(
    'title' => 'Edit search page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_page_edit', 4),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_settings'] = array(
    'title' => 'Custom search user settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_usersettings_admin'),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.usersettings.inc',
  );
  $items['admin/config/search/bibdk_custom_search/%/remove_element/%'] = array(
    'title' => 'Edit search page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_page_edit', 4, 6),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/%/delete'] = array(
    'title' => 'Edit search page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_delete_page', 4),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements'] = array(
    'title' => 'Elements',
    'description' => 'Create, alter or delete search options in the search block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_elements_admin'),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.elements.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/edit'] = array(
    'title' => 'Edit search element',
    'description' => 'Edit and add values to a search element.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_element_edit', 5),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/remove_value/%'] = array(
    'title' => 'Edit search element',
    'description' => 'Edit and add values to a search element.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_element_edit', 5, 7),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/delete'] = array(
    'title' => 'Delete search element',
    'description' => 'Delete a search element.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_element_delete', 5),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values'] = array(
    'title' => 'Values',
    'description' => 'Create, alter or delete search element values.',
    'page arguments' => array('bibdk_custom_search_values_admin'),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.values.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['admin/config/search/bibdk_custom_search/values/%/edit'] = array(
    'title' => 'Edit search value',
    'description' => 'Edit and add values to a search value.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_value_edit', 5),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.values.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values/%/delete'] = array(
    'title' => 'Delete search value',
    'description' => 'Delete a search value.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_value_delete', 5),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.values.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values/%/delete_option/%'] = array(
    'title' => 'Delete search value',
    'description' => 'Delete a search value.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_custom_search_value_edit', 5, 7),
    'access arguments' => array('administer bibdk custom search pages'),
    'file' => 'includes/bibdk_custom_search.values.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function bibdk_custom_search_theme() {
  $path = drupal_get_path('module', 'bibdk_custom_search') . '/theme';
  $bibdk_custom_search_theme_array = array(
    'bibdk_custom_search-sort-pages-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-sort-pages-form',
    ),
    'bibdk_custom_search-edit-page-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-edit-page-form',
    ),
    'bibdk_custom_search-edit-page-elements-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-sort-region-form',
    ),
    'bibdk_custom_search-list-elements-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-sort-elements-form',
    ),
    'bibdk_custom_search-edit-element-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-edit-element-form',
    ),
    'bibdk_custom_search-edit-element-values-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-edit-element-values-form',
    ),
    'bibdk_custom_search-list-values-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-sort-values-form',
    ),
    'bibdk_custom_search-edit-value-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-edit-value-form',
    ),
    'bibdk_custom_search-list-options-form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk_custom_search-sort-options-form',
    ),
    'bibdk_custom_search_advanced_search_element' => array(
      'path' => $path,
      'render element' => 'form',
      'template' => 'bibdk-custom-search-search-element-form',
    ),
    'bibdk_custom_search_advanced_search_panel_wrapper' => array(
      'path' => $path,
      'render element' => 'form',
      'template' => 'bibdk-custom-search-advanced-search-panel-wrapper',
    ),
    'bibdk_custom_search_radio_buttons' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk-custom-search-radio-buttons',
    ),
    'bibdk_custom_search_usersettings_admin' => array(
      'render element' => 'form',
      'file' => 'includes/bibdk_custom_search.usersettings.inc',
    )
  );

  return $bibdk_custom_search_theme_array;
}


/**
 * Implements hook_help().
 */
function bibdk_custom_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help#bibdk_custom_search';
      $file = drupal_get_path('module', 'bibdk_custom_search') . "/help/bibdk_custom_search.html";
      return $output = file_get_contents($file);
      break;
  }
}


/**
 * Implements hook_permission().
 */
function bibdk_custom_search_permission() {
  return array(
    'administer bibdk custom search pages' => array(
      'title' => t('Administer custom search pages'),
      'description' => t('Allow users to create and edit custom search pages.'),
    ),
  );
}


/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return mixed
 */
function bibdk_custom_search_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'search_block_form';
    case 'search_form';
      _bibdk_custom_search_form_search_form_alter($form, $form_state, $form_id);
      break;
  }
}


/**
 * Alters the search form to contain advanced search fields.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return mixed
 */
function _bibdk_custom_search_form_search_form_alter(&$form, &$form_state, $form_id) {
  // Define page_id
  $page_id = (isset($_REQUEST['page_id'])) ? $_REQUEST['page_id'] : ((isset($_GET['q'])) ? $_GET['q'] : NULL);
  $form['#attributes']['data-type'] = array($page_id);
  $form['page_id'] = array(
    '#type' => 'hidden',
    '#value' => $page_id,
  );

  if ( module_exists('ting_openformat') || module_exists('bib_open_format_search') ) {
    // override default form submission (search_box_form_submit() sets form_set_error if search_block_form is empty).
    $n = array_search('search_box_form_submit',$form['#submit']);
    if ( $n !== FALSE ) {
      unset($form['#submit'][$n]);
    }
    $form['#submit'][] = 'bibdk_custom_search_submit';
    $form['#validate'][] = 'bibdk_custom_search_validate';
  }


  // Set default value of main search field
  $default_value = (isset($_REQUEST['search_block_form'])) ? $_REQUEST['search_block_form'] : $form['search_block_form']['#default_value'];
  $form['search_block_form']['#default_value'] = $default_value;
  $form['search_block_form']['#attributes']['title'] = t('placeholder_text', array(), array('context' => 'bibdk_custom_search'));
  $form['search_block_form']['#attributes']['placeholder'] = t('placeholder_text', array(), array('context' => 'bibdk_custom_search'));
  $form['search_block_form']['#attributes']['class'][] = 'search-block-form';
  $form['search_block_form']['#type'] = 'textfield';
  $form['search_block_form']['#title'] = t('Search', array(), array('context' => 'bibdk_custom_search'));
  $form['search_block_form']['#title_display'] = 'invisible';
  $form['search_block_form']['#size'] = '40';

  $pages = _bibdk_custom_search_get_pages_db();
  // Gets the searchpages navigationbar if pages exists
  if ($pages) {
    $form['searchpages'] = _bibdk_custom_search_get_searchpage_buttons($page_id, $pages);
    $form['select_material_type'] = _bibdk_custom_search_get_mobile_material_selector($page_id, $pages);
  }

  // Gets the advanced search fields if they exists
  $advanced_fields = _bibdk_custom_search_get_advanced_fields_form($page_id);
  if ($advanced_fields) {
    $form['advanced'] = $advanced_fields;
  }

  // TO DO: Move to autocomplete/frontend module?
  drupal_add_js('misc/autocomplete.js', array(
    'cache' => TRUE,
    'scope' => 'footer',
    'every_page' => TRUE
  ));
}

/**
 * Override search_form_validate()
 * Default form validation (returns error when submitting the search result page search form).
 */
function bibdk_custom_search_validate($form, &$form_state) {
  // $form['processed_keys'] and $form_state['values']['keys'] isn't set when submitting
  // the search result page search form. We don't need it anyway, since we redirect to GET on submit.
}


/**
 * Override search_form_submit()
 */
function bibdk_custom_search_submit(&$form, &$form_state) {

  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $page_id = $form_state['values']['page_id'];
  $submitted_searchcodes = bibdk_custom_search_get_submitted_searchcodes($_POST);
  unset($submitted_searchcodes['qe']['query']);
  if ( !empty($submitted_searchcodes['qe']['n/a']) ) {
    $_na = $submitted_searchcodes['qe']['n/a'];
    unset($submitted_searchcodes['qe']['n/a']);
    $submitted_searchcodes['qe'] += $_na;
  }
  // TO DO: $searchcodes_inputcheck['year.op'] is specific for Bibliotek.dk & Netpunkt.
  //        - it ought to be a more generic test model.
  $searchcodes_inputcheck = $submitted_searchcodes['qe'];
  unset($searchcodes_inputcheck['year.op']);

  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  if ($form_state['values']['search_block_form'] == '' && sizeof($searchcodes_inputcheck) == 0) {
    form_set_error('keys', t('Please enter some keywords.'));
  }

  $form_id = $form['form_id']['#value'];
  $info = search_get_default_module_info();
  if ($info) {
    $options['query'] = array(
      'search_block_form' => (!empty($_POST['search_block_form'])) ? trim($_POST['search_block_form']) : '',
      'page_id' => $page_id
    );
    $options['query'] += $submitted_searchcodes['qe'];
    foreach ($options['query'] as $key => $query_item) {
      if ( is_array($query_item) ) {
        $options['query'][$key] = array_unique($query_item);
      }
    }
    $options['fragment'] = 'content';
    drupal_goto('search/' . $info['path'], $options);
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.'), 'error');
  }
}


/**
 * Generates a select dropdown form element to contain materials. To be shown
 * on smaller devices only.
 *
 * @param $page_id
 * @param $pages
 * @return array
 */
function _bibdk_custom_search_get_mobile_material_selector($page_id, $pages) {
  $options = array();

  foreach ($pages as $page) {
    $key = $page['href'];
    $value = $page['title'];
    $options[$key] = $value;
  }

  $select = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $page_id,
  );

  return $select;
}


/**
 * Get form for advanced search fields
 *
 * @param bool $destination
 * @return array|null
 */
function _bibdk_custom_search_get_advanced_fields_form($destination = FALSE) {

  // get search page
  $page = _bibdk_custom_search_get_page_db($destination);
  if (empty($page)) {
    return NULL;
  }

  // Get results form db
  $result = _bibdk_custom_search_get_advanced_fields_db($page);
  if (empty($result)) {
    return NULL;
  }

  // Get default values
  $default_values = $_GET;
  if (isset($page['page_path'])) {
    $default_values['q'] = $page['page_path'];
  }

  // Move elements with no search code to top level of default values array
  if (isset($default_values['n/a'])) {
    $default_values += $default_values['n/a'];
    unset($default_values['n/a']);
  }

  $advanced_search_panel = _bibdk_custom_search_get_search_panel($page, $result, $default_values);

  return $advanced_search_panel;
}


/**
 * Delivers the advanced search panel
 *
 * @param array $page
 * @param DatabaseStatementInterface $result
 * @param array $default_values
 * @return array
 */
function _bibdk_custom_search_get_search_panel($page, $result, $default_values) {
  global $base_path;
  $is_visible = _bibdk_custom_search_is_advanced_search_expanded($default_values);
  $toggled = ($is_visible) ? 'toggled' : '';
  $expand_hidden = ($is_visible) ? 'hidden' : '';
  $collaps_hidden = ($is_visible) ? '' : 'hidden';
  $advanced_search_is_loaded = FALSE;

  $advanced_search_panel = array(
    '#theme' => 'bibdk_custom_search_advanced_search_panel_wrapper',
    '#type' => 'fieldset',
    '#toggled' => $toggled,
    '#expand_hidden' => $expand_hidden,
    '#collaps_hidden' => $collaps_hidden,
    '#base_path' => $base_path,
    '#attributes' => array(
      'class' => array(
        _bibdk_custom_search_trim_string(($page['page_title']) ? $page['page_title'] : FALSE),
      ),
      'data-type' => array($_GET['q']),
    ),
  );

  if ($is_visible) {
    $advanced_search_panel['#attributes']['class'][] = 'is-visible';
  }

  $panel = _bibdk_custom_search_create_advanced_form($result, $default_values);
  $advanced_search_panel += $panel;
  $advanced_search_is_loaded = TRUE;

  //tell our JS if the advanced search panel should be loaded by AJAX or not
  drupal_add_js(array('bibdk_custom_search' => array('advancedSearchIsLoaded' => $advanced_search_is_loaded)), 'setting');

  // Page specific elements
  if ($page['delimiter']) {
    $advanced_search_panel['delimiter'] = array(
      '#type' => 'hidden',
      '#region' => 'main',
      '#value' => $page['delimiter'],
    );
  }

  $advanced_search_panel['#collapsed'] = ($page['expand']) ? $page['expand'] : FALSE;
  $advanced_search_panel['#main_search_name'] = ($page['page_title']) ? $page['page_title'] : FALSE;

  return $advanced_search_panel;
}


/**
 * Check if advanced searchsettings have been activated in previous search
 *
 * @param array $get
 * @return bool
 */
function _bibdk_custom_search_is_advanced_search_expanded($get) {

  $query = isset($get['qe']) ? $get['qe'] : array();

  // one of the year.op options are always selected
  if (isset($query['year.op'])) {
    unset($query['year.op']);
  }

  // remove base query
  if (isset($query['query'])) {
    unset($query['query']);
  }

  // specialized search pages are only toggled visible if one of the elements are used
  // not including the delimiter
  if (isset($query['delimiter'])) {
    unset($query['delimiter']);
  }

  if (count($query) > 0) {
    return TRUE;
  }

  $expand_setting = bibdk_custom_search_user_settings($get['q']);
  if (!isset($expand_setting)) {
    return FALSE;
  }

  return TRUE;
}


/**
 * Strips a string for spaces and lowersaces it
 *
 * @param string $string
 * @return string
 */
function _bibdk_custom_search_trim_string($string) {
  return strtolower(strtr($string, array(
    ' ' => '',
    '-' => '',
    'æ' => 'ae',
    'ø' => 'oe',
    'å' => 'aa',
  )));
}


/**
 * Strips a string for spaces, æøå and lowercawes it
 *
 * @param string $string
 * @return string
 */
function _bibdk_custom_search_machine_readable($string) {
  return strtolower(preg_replace(array(
    '@[æøå]+@',
    '@[^a-z0-9_]+@'
  ), array(
    'a',
    '_'
  ), $string));
}


/**
 * Renders a form button for each page in pages array
 *
 * @param string $req
 * @param array $pages
 * @return array
 */
function _bibdk_custom_search_get_searchpage_buttons($req, $pages) {
  $searchpages['#type'] = 'markup';
  $searchpages['#prefix'] = '<nav id="search-tabs" class="clearfix"><ul class="nav--horizontal">';
  $searchpages['#suffix'] = '</ul></nav>';

  foreach ($pages as $page) {
    $class = ($page['href'] == $req) ? 'active' : '';
    $searchpages[$page['title']] = bibdk_custom_search_searchpage_button_link($page['title'], $page['href'], $class);
    $searchpages[$page['title']] += array(
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    );
  }

  return $searchpages;
}


/**
 * Create searchpage button link
 *
 * @param $text
 * @param $path
 * @param string $class
 * @return array render array
 */
function bibdk_custom_search_searchpage_button_link($text, $path, $class = '') {
  $link = array(
    '#theme' => 'link',
    '#text' => $text,
    '#path' => $path,
    '#options' => array(
      'attributes' => array(
        'id' => 'custom-search-page-link-' . _bibdk_custom_search_trim_string($text),

      ),
      'html' => FALSE,
    ),
  );

  if (!empty($class)) {
    $link['#options']['attributes']['class'][] = $class;
  }

  return $link;
}


/**
 * Submit handler for search page selection.
 * When a searchpage is selected for the first time a form submit will happen
 *
 * @param $form
 * @param $form_state
 */
function bibdk_custom_search_new_searchpage_picked($form, $form_state) {
  $dest = $form_state['clicked_button']['#dest'];
  drupal_goto($dest);
}


/**
 * Extract title, description and helptext from render-array, and set them as
 * individual variables to be set in the template
 *
 * @param $vars
 */
function bibdk_custom_search_preprocess_bibdk_custom_search_advanced_search_element(&$vars) {
  global $base_path;
  $vars['base_path'] = $base_path;
  $vars['title'] = isset($vars['form']['#title_text']) ? $vars['form']['#title_text'] : "";
  $vars['help'] = isset($vars['form']['#help_text']) ? $vars['form']['#help_text'] : "";
  $vars['description'] = isset($vars['form']['#description_text']) ? $vars['form']['#description_text'] : "";
  $vars['element_id'] = isset($vars['form']['#element_id']) ? $vars['form']['#element_id'] : "";
}


/**
 * Translates a string and appends the given context.
 * The main purpose of this function is to ensure that any changes made to
 * bibdk_custom_search pages is written to db immediately and thereby availabel
 * for translation with clearing cache.
 *
 * @param string $string
 * @param string $context
 * @return null|string
 */
function bibdk_custom_search_translate_update($string, $context) {
  return t($string, array(), array('context' => "bibdk_custom_search:$context"));
}


/**
 * Translates a string and appends the given context.
 *
 * @param string $string
 * @param string $context
 * @return null|string
 */
function bibdk_custom_search_translate($string, $context) {
  return t($string, array(), array('context' => "bibdk_custom_search:$context"));
}


/** Implements hook_preprocess_page
 *
 * @param $vars
 */
function bibdk_custom_search_preprocess_page(&$vars) {
  $front = bibdk_custom_search_user_settings_get('bibdk_custom_search_start_page', NULL);

  if (!$front) {
    $front = '<front>';
  }

  if (drupal_is_front_page() && ($front !== '<front>' && $front !== 'bibdk_frontpage') && strpos($_SERVER['REQUEST_URI'], 'bibdk_frontpage') === FALSE) {
    drupal_goto($front);
  }
}

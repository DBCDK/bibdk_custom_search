<?php

/**
 * @file
 * Bring customizations to the default search box
 */

/*
 *  TO DO (optionally): wildcard matching on search page path?
 */
module_load_include('inc', 'bibdk_custom_search', 'bibdk_custom_search.export');

/**
 * Implements hook_menu().
 */
function bibdk_custom_search_menu() {
  $items['admin/config/search/bibdk_custom_search'] = array(
    'title'             => 'bibdk search pages',
    'description'       => 'Customize the default search, add custom search pages, and change labels, values & ordering.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_admin'),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/settings'] = array(
    'title'             => 'Pages',
    'description'       => 'Create, alter or delete search pages.',
    'access arguments'  => array('administer bibdk custom search pages'),
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => 0,
  );
  $items['admin/config/search/bibdk_custom_search/%/edit'] = array(
    'title'             => 'Edit search page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_page_edit', 4),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/%/remove_element/%'] = array(
    'title'             => 'Edit search page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_page_edit', 4,6),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/%/delete'] = array(
    'title'             => 'Edit search page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_delete_page', 4),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.pages.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements'] = array(
    'title'             => 'Elements',
    'description'       => 'Create, alter or delete search options in the search block.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_elements_admin'),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.elements.admin.inc',
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 1,
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/edit'] = array(
    'title'             => 'Edit search element',
    'description'       => 'Edit and add values to a search element.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_element_edit',5),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/remove_value/%'] = array(
    'title'             => 'Edit search element',
    'description'       => 'Edit and add values to a search element.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_element_edit',5,7),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/elements/%/delete'] = array(
    'title'             => 'Delete search element',
    'description'       => 'Delete a search element.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_element_delete',5),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.elements.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values'] = array(
    'title'             => 'Values',
    'description'       => 'Create, alter or delete search element values.',
    'page arguments'    => array('bibdk_custom_search_values_admin'),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.values.admin.inc',
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 4,
  );
  $items['admin/config/search/bibdk_custom_search/values/%/edit'] = array(
    'title'             => 'Edit search value',
    'description'       => 'Edit and add values to a search value.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_value_edit',5),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.values.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values/%/delete'] = array(
    'title'             => 'Delete search value',
    'description'       => 'Delete a search value.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_value_delete',5),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.values.admin.inc',
  );
  $items['admin/config/search/bibdk_custom_search/values/%/delete_option/%'] = array(
    'title'             => 'Delete search value',
    'description'       => 'Delete a search value.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bibdk_custom_search_value_edit',5,7),
    'access arguments'  => array('administer bibdk custom search pages'),
    'file'              => 'includes/bibdk_custom_search.values.admin.inc',
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function bibdk_custom_search_permission() {
  return array(
    'administer bibdk custom search pages' => array(
      'title' => t('Administer custom search pages'),
      'description' => t('Allow users to create and edit custom search pages.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
/*
  function bibdk_custom_search_form_alter(&$form, &$form_state, $form_id) {
    $form['#submit'][] = 'bibdk_custom_search_submit';
  }
*/

/**
 * Alter the search to respect the search modes selected.
 */
/*
  function bibdk_custom_search_submit($form, &$form_state) {
  }
*/

/**
 * @brief Implementation of hook_form_FORM_ID_alter() for form search_block_form.
 */
function bibdk_custom_search_form_search_block_form_alter(&$form, &$form_state, $form_id) {

  $advanced_fields = _bibdk_custom_search_get_advanced_fields_form();
  $pages = _bibdk_custom_search_get_pages_db();

  if ($pages)
    $form['pages'] = array(
      '#type' => 'markup',
      '#markup' => theme('bibdk_custom_search_menu', array('pages'=> $pages))
    );
  if ( $advanced_fields ) {
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#theme' => 'bibdk_custom_advanced_search_menu'
    );
    foreach ($advanced_fields as $name => $field) {
      if ( is_array($field) && isset($field['#region']) && $field['#region'] != 'main' ) {
        $form['advanced'][ $field['#region'] ] = array(
          '#type' => 'fieldset',
          '#title' => t('Advanced search'),
          '#collapsible' => TRUE,
          '#collapsed' => ( $advanced_fields['#collapsed'] ) ? $advanced_fields['#collapsed'] : FALSE,
          '#weight' => 102,
        );
        break;
      }
    }

    $form['#attached'] = array(
      'css' => array(
        drupal_get_path('module', 'bibdk_custom_search') . '/css/bibdk_custom_search.css',
      ),
      'js' => array(
        drupal_get_path('module', 'bibdk_custom_search') . '/js/bibdk_custom_search_options_subgroup.js',
      )
    );

    if ( isset($advanced_fields['#bibdk_pre_search_process']) )  {
      $form['#bibdk_pre_search_process'] = $advanced_fields['#bibdk_pre_search_process'];
      $form['#attached']['js'] = array_merge( $form['#attached']['js'], module_invoke_all('bibdk_custom_search_add_js',$advanced_fields['#bibdk_pre_search_process']));
      unset($advanced_fields['#bibdk_pre_search_process']);
    }
    foreach ($advanced_fields as $name => $field) {
      if ( is_array($field) ) {
        if ( $field['#region'] == 'main' ) {
          $form['advanced'][$name] = $field;
        } else {
          $form['advanced'][ $field['#region'] ][$name] = $field;
        }
      }
    }

  }

  $form['#submit'] = array('bibdk_custom_search_submit');
  return $form;
}


/**
 * Implements hook_theme().
 */
function bibdk_custom_search_theme() {
  $path = drupal_get_path('module', 'bibdk_custom_search') . '/theme';
  $bibdk_custom_search_theme_array = array(
    'bibdk_custom_search-sort-pages-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-pages-form',
    ),
    'bibdk_custom_search-edit-page-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-page-form',
    ),
    'bibdk_custom_search-edit-page-elements-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-region-form',
    ),
    'bibdk_custom_search-list-elements-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-elements-form',
    ),
    'bibdk_custom_search-edit-element-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-element-form',
    ),
    'bibdk_custom_search-edit-element-values-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-element-values-form',
    ),
    'bibdk_custom_search-list-values-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-values-form',
    ),
    'bibdk_custom_search-edit-value-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-edit-value-form',
    ),
    'bibdk_custom_search-list-options-form' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-sort-options-form',
    ),
    'bibdk_search_element' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk_custom_search-search-element-form',
    ),
    'bibdk_custom_search_menu' => array(
      'path'            => $path,
      'variables'       => array('pages'=>array()),
      'template'        => 'bibdk-custom-search-menu',
    ),
    'bibdk_custom_advanced_search_menu' => array(
      'render element'  => 'form',
      'path'            => $path,
      'template'        => 'bibdk-custom-advanced-search-menu',
    ),
  );

  return $bibdk_custom_search_theme_array;
}



/**
 * Process a block search form submission.
 */
function bibdk_custom_search_submit($form, &$form_state) {

  $controls = array();
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $form_id = $form['form_id']['#value']; // 'search_block_form'
  $keys = $form_state['values'][$form_id];
  $fields = array();

  $extended_fields = _bibdk_custom_search_get_field_searchcodes();

  $fields = module_invoke_all('bibdk_custom_search_field_preprocess', $form, $form_state);

  // preprocess quickfix
  $form_state['values']['da48923f-e5ba-5ef4-ad4f-c8aab6767a83']="";
  $form_state['values']['3021bc15-1305-10f4-2112-d08af39718bf']="";

  $groups = array();
  foreach ( $form_state['values'] as $key => $values){
    if (isset($extended_fields[$key])){
      $term = $extended_fields[$key];
      if (!is_array($values))
        $values = array($values);
      foreach($values as $k => $value){
        if ($value){
          $groups[$term][] = $term . '=' . $value;
        }
      }
    }
  }
  foreach($groups as $group){
    $fields[] = '(' . implode(' OR ', $group) . ')';
  }

  if ( isset($form_state['values']['delimiter']) && $delimiter = $form_state['values']['delimiter'] ) {
    if ( $delimiter != "" ) {
      $fields[] = $delimiter;
    }
  }

  $q = array();

  if (!empty($keys)) {
    $q[] = $keys;
  }

  if (!empty($fields)) {
    $q[] = '(' . implode(' AND ', $fields) . ')';
  }
  $q = join(' AND ', $q);

  $controls =  module_invoke_all('ting_search_get_controls', $form, $form_state);

  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if ($q == '') {
    form_set_error('keys', t('Please enter some keywords.', array(), array('context' => 'bibdk_borchk:error')));
  }
  $search_info = array();
  $request_path = arg();

  if ($request_path[0] != 'search' || !isset($request_path[1])) {
    $search_info = search_get_default_module_info();
  }
  else {
    foreach (search_get_info() as $search_engine) {
      if ($search_engine['path'] == $request_path[1]) {
        $search_info = $search_engine;
        break;
      }
    }
  }
  if (!empty($search_info['path']) && in_array($search_info['module'], variable_get('search_active_modules', array()))) {
    $form_state['redirect'] = FALSE;
    $url = 'search/' . $search_info['path']. '/' . trim($q);
    drupal_goto($url, array('query' => $controls));
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.', array(), array('context' => 'bibdk_borchk:error')), 'error');
  }
}



/**
 * Implements hook_block_info().
 */
function bibdk_custom_search_block_info() {
  $blocks['bibdk-search-menu'] = array(
      'info' => t('Bibliotek.dk search menu'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function bibdk_custom_search_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'bibdk-search-menu':
      $block['subject'] = t('Bibliotek.dk search menu');
      $block['content'] = theme('bibdk_custom_search_menu', array('pages'=>_bibdk_custom_search_get_pages_db()));
      break;
  }
  return $block;

}

/**
 * get form for advanced search fields
 */
function _bibdk_custom_search_get_advanced_fields_form() {
  global $language;
  $path = drupal_get_destination();

  // If cache exists return cache;
  $cache_id = 'bibdk_custom_search_fields_' . str_replace('/','_',$path['destination']) . $language->language;
  if ($cache = cache_get($cache_id)) {
    $form = $cache->data;
    return $form;
  }
  // get search page
  $page = _bibdk_custom_search_get_page_db($path['destination']);
  if (empty($page)){
    return null;
  }
  // Get results form db
  $result = _bibdk_custom_search_get_advanced_fields_db($page);
  if (empty($result)){
    return null;
  }

  //Parse result into search elements
  $elements = _bibdk_custom_search_structure_elements_array($result);

  // create form from search elements
  $form = _bibdk_custom_search_advanced_fields_parse_form($elements, $page);
  cache_set($cache_id, $form, 'cache');
  return $form;
}

/**
 *  Get searchpage from db
 * @param $page_path
 */
function _bibdk_custom_search_get_page_db($page_path){
  return db_select('bibdk_custom_search', 'p')
    ->fields('p')
    ->condition('page_path', $page_path,'=')
    ->execute()
    ->fetchAssoc();
}

/**
 * Get advanced search field records from db
 * @param $page
 * @return DatabaseStatementInterface|null
 */
function _bibdk_custom_search_get_advanced_fields_db($page){
    // bibdk_custom_search_elements
    $query = db_select('bibdk_custom_search', 's');
    $query -> leftjoin('bibdk_custom_search_map_elements', 'me', 's.p_uuid = me.p_uuid');
    $query -> join('bibdk_custom_search_elements', 'e', 'me.e_uuid = e.e_uuid');
    $query -> leftjoin('bibdk_custom_search_map_values', 'mv', 'e.e_uuid = mv.e_uuid');
    $query -> join('bibdk_custom_search_values', 'v', 'mv.v_uuid = v.v_uuid');
    $query -> leftjoin('bibdk_custom_search_options', 'o', 'v.v_uuid = o.v_uuid');
    $query -> fields('me', array('region','sort'));
    $query -> fields('e', array('e_uuid','element_label','description','help_text','access_key','tab_index'));
    $query -> fields('mv', array('sort'));
    $query -> fields('v', array('v_uuid','value_title','value_type','search_code','default_value'));
    $query -> fields('o', array('o_uuid','sort','label','value','expand'));
    $query -> condition('s.p_uuid', $page['p_uuid'],'=');
    $query -> orderBy('me.sort', 'ASC');
    $query -> orderBy('e.element_label', 'ASC');
    $query -> orderBy('region', 'ASC');
    $query -> orderBy('mv.sort', 'ASC');
    $query -> orderBy('v.value_title', 'ASC');
    $query -> orderBy('o.sort', 'ASC');
    $result = $query -> execute()->fetchAll();
    return $result;
}

function _bibdk_custom_search_structure_elements_array($result){
  $elements = array();

  // manipulation of data into substrukture
  foreach ($result as $record) {
    $e_uuid = $record->e_uuid;
    $v_uuid = $record->v_uuid;
    $o_uuid = $record->o_uuid;

    // init element
    if (!isset($elements[$e_uuid]) ) {
      $elements[ $e_uuid ] = array(
        'element_label' => bibdk_custom_search_translate('element', $e_uuid, 'element_label', $record->element_label),
        'description'   => bibdk_custom_search_translate('element', $e_uuid, 'description', $record->description),
        'help_text'     => bibdk_custom_search_translate('element', $e_uuid, 'help_text', $record->help_text),
        'region'        => $record->region,
        'access_key'    => $record->access_key,
        'tab_index'     => $record->tab_index,
      );
    }

    // Add value to elements
    if ( $v_uuid && !isset($elements[$e_uuid]['values'][$v_uuid]) ) {
      $elements[ $e_uuid ]['values'][ $v_uuid ] = array(
        'value_title'   => $record->value_title,
        'value_type'    => $record->value_type,
        'search_code'   => $record->search_code,
        'default_value' => $record->default_value,
      );
    }

    // Structure options
    if ( $o_uuid ) {
      $elements[ $e_uuid ]['values'][ $v_uuid ]['options'][ $record->value ]['label'] = bibdk_custom_search_translate('option', $o_uuid, 'label', $record->label);
      $elements[ $e_uuid ]['values'][ $v_uuid ]['options'][ $record->value ]['v_uuid'] = $v_uuid;
    }
    if ( $o_uuid && $record->expand ) {
      //
      $elements[ $e_uuid ]['values'][ $v_uuid ]['options'][$record->value]['childElem'] = _bibdk_custom_search_get_options( $e_uuid, $o_uuid, $record->value, $record->expand, array(), array() );
    }
  }

  return $elements;
}

/**
 * Create advanced search form
 * @param $result
 * @param $page
 * @return array
 */
function _bibdk_custom_search_advanced_fields_parse_form($elements, $page) {
    foreach ($elements as $e_uuid => $element) {
      $machine_readable = strtolower($element['element_label']);
      $machine_readable = preg_replace(array('@[æøå]+@', '@[^a-z0-9_]+@'),array('a', '_'),$machine_readable);
      $form['bibdk_custom_search_element_' . $e_uuid] = array(
        '#type'         => 'fieldset',
        '#collapsible'  => FALSE,
        '#collapsed'    => FALSE,
        '#tree'         => true,
        '#region'       => $element['region'],
        '#theme'        => 'bibdk_search_element',
        '#title_text'        => $element['element_label'],
        '#description_text'  => $element['description'],
        '#help_text'    => $element['help_text'],
        '#attributes'   => array(
          'class'       => array($machine_readable, 'element-wrapper'),
        ),
      );
      if ( sizeof($element['values']) > 1 ) {
        $form['#bibdk_pre_search_process'][$e_uuid] = array_keys($element['values']);
      }
      foreach ($element['values'] as $v_uuid => $value) {
        $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ] = array(
          '#type'           => $value['value_type'],
          '#title'          => $value['value_title'],
          '#title_display'  => 'invisible',
          '#default_value'  => $value['default_value'],
          '#attributes'     => array(
            'tabindex' => array($element['tab_index']),
            'accesskey' => array($element['access_key']),
            'term' => array($v_uuid)),
          '#tree' => false,
        );
        switch ( $value['value_type'] ) {
          CASE 'hidden':
          CASE 'textfield':
          CASE 'textarea':
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ]['#size'] = 30;
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ]['#maxlength'] = 64;
            break;
          CASE 'select':
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ]['#default_value'] = array($value['default_value']);
            $options = array();
            if ($value['options']){
            foreach($value['options'] as $key => $option){
              $options[$key] = $option['label'];
            }
            }
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ]['#options'] = $options;
            break;
          CASE 'radios':
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ]['#options'] = $value['options'];
            break;
          CASE 'checkboxes':
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ] = _create_checkboxes_for_search_element($value['options'], $v_uuid);
            $form['bibdk_custom_search_element_' . $e_uuid][ $v_uuid ]['#tree'] = true;
            break;
          DEFAULT:
            break;
        }
        if ( isset($value['attached']) ) {
          $form['bibdk_custom_search_element_' . $e_uuid]['#attached']['js'][] = array(
            'data' => array('expanded' => array($e_uuid => $value['attached'])),
            'type' => 'setting',
          );
        }
      }
    }
    // Page specific elements
    if ( $page['delimiter'] ) {
      $form['delimiter'] = array(
        '#type'   => 'hidden',
        '#region' => 'main',
        '#value'  => $page['delimiter'],
      );
    }
    $form['#collapsed'] = ( $page['expand'] ) ? $page['expand'] : FALSE;
    $form['#main_search_name'] = ( $page['page_title'] ) ? $page['page_title'] : FALSE;
    //$form['#structure'] = $structure;
  return $form;

}

/**
 * Extract title, description and helptext from render-array, and set them as individual variables to be set in the template
 * @param $vars
 */
function bibdk_custom_search_preprocess_bibdk_search_element(&$vars){
  $vars['title'] = isset($vars['form']['#title_text']) ? $vars['form']['#title_text'] : "";
  $vars['help'] = isset($vars['form']['#help_text']) ? $vars['form']['#help_text'] : "";
  $vars['description'] = isset($vars['form']['#description_text']) ? $vars['form']['#description_text'] : "";
}

function _create_checkboxes_for_search_element($values, $parent){
  $form = array();
  foreach ($values as $key => $value){
    $form[$key] = array(
      '#type' => 'container',
      '#parents' => array($parent),
    );
    $form[$key][$value['label']] = array (
      '#type' => 'checkbox',
      '#title' => $value['label'],
      '#return_value' => $key,
      '#attributes' => array(
        'group' => $parent,
      ),
    );
    if($key == null){
      $form[$key][$value['label']]['#attributes'] += array(
        'class' => array('master'),
      );
    }
    if (isset($value['childElem'])){
      $form[$key][$value['label']]['#attributes'] += array(
        'parent' => $key,
      );
      $form[$key][$value['label']]['#title'] = '<span child="' .$key. '" class="toggle-subgroup"> + </span>' . $form[$key][$value['label']]['#title'];
      $form[$key.'-fieldset'] = array(
        '#type' => 'fieldset',
        '#attributes' => array(
          'child' => $key,
          'class' => array('sub-elements'),
        ),
        '#parents' => array($parent),
      );
      $form[$key.'-fieldset'] += _create_checkboxes_for_search_element($value['childElem'], $parent);
    }

  }
  return $form;
}

/**
 *
 */
function _bibdk_custom_search_get_options( $e_uuid, $o_uuid, $value, $v_uuid, $options, $subgroup) {

  $expand = _bibdk_custom_search_get_options_db($v_uuid);
  if ( !$expand )
    return null;

  foreach ($expand as $option) {
    if ( $option['expand'] ) {
      $return[ $option['value']] = $option;
      $return[ $option['value'] ]['childElem'] = _bibdk_custom_search_get_options( $e_uuid, $option['o_uuid'], $option['value'],  $option['expand'], $options, $subgroup);
    }
    else{
      $return[$option['value']] = $option;
    }
  }
  return $return;
}


/**
 *
 */
function _bibdk_custom_search_get_pages_db() {
  global $language;

  $pages = &drupal_static(__FUNCTION__);

  if (!isset($pages)) {

    if ($cache = cache_get('bibdk_custom_search_pages_db_' . $language->language)) {

      $pages = $cache->data;

    } else {

      $pages = array();

      $query = db_select('bibdk_custom_search', 'p');
      $query
        ->fields('p')
        ->orderBy('sort', 'ASC');
      $result = $query->execute();

      foreach ($result as $page) {
        $p_uuid = $page->p_uuid;
        $row = array(
          'title' => bibdk_custom_search_translate('page', $p_uuid, 'menu_title', $page->menu_title),
          'href' => $page->page_path,
        );
        $pages[] = $row;
      }

      cache_set('bibdk_custom_search_pages_db_' . $language->language, $pages, 'cache');

    }
  }

  return $pages;

}


/**
 *
 */
function _bibdk_custom_search_get_options_db($value_id) {
  global $language;

  // note: drupal_static(__FUNCTION__) crashes Drupal if used here.
  if ($cache = cache_get('bibdk_custom_search_options_db_' . $value_id . $language->language)) {

    $options = $cache->data;

  } else {

    $options = array();

    $query = db_select('bibdk_custom_search_options', 'o');
    $query
      ->fields('o', array('o_uuid','v_uuid','label','value','expand','sort'))
      ->condition('v_uuid', $value_id,'=')
      ->orderBy('sort', 'ASC');
    $result = $query->execute();

    foreach ($result as $option) {
      $row = array(
        'o_uuid'     => $option->o_uuid,
        'v_uuid'  => $option->v_uuid,
        'label'   => bibdk_custom_search_translate('option', $option->o_uuid, 'label', $option->label),
        'value'   => $option->value,
        'expand'  => $option->expand,
        'sort'    => $option->sort,
      );
      $options[] = $row;
    }

    cache_set('bibdk_custom_search_options_db_' . $value_id . $language->language, $options, 'cache');

  }

  return $options;

}


/**
 * get form fields and search codes from database.
 */
function _bibdk_custom_search_get_field_searchcodes() {

  $fields = &drupal_static(__FUNCTION__);

  if (!isset($fields)) {

    if ($cache = cache_get('bibdk_custom_search_field_searchcodes')) {

      $fields = $cache->data;

    } else {

      $query = db_select('bibdk_custom_search_values', 'v');
      $query -> fields('v', array('v_uuid','value_title','value_type','search_code','default_value'));
      $result = $query -> execute();

      $fields = array();
      foreach ($result as $record) {
        $fields[ $record->v_uuid ] = $record->search_code;
      }

      cache_set('bibdk_custom_search_field_searchcodes', $fields, 'cache');

    }
  }

  return $fields;

}


/**
 * Wrapper function for i18n_string_remove()
 */
function bibdk_custom_search_translate_remove($type, $id, $key) {
  return function_exists('i18n_string_remove')
          ? i18n_string_remove("bibdk_custom_search:$type:$id:$key")
          : TRUE;
}

/**
 * Wrapper function for i18n_string_update()
 */
function bibdk_custom_search_translate_update($type, $id , $key, $string) {
  return function_exists('i18n_string_update')
          ? i18n_string_update(array('bibdk_custom_search', $type, $id, $key), check_plain($string))
          : TRUE;
}

/**
 * Wrapper function for i18n_string()
 */
function bibdk_custom_search_translate($type, $id, $key, $string) {
  return function_exists('i18n_string')
          ? i18n_string("bibdk_custom_search:$type:$id:$key", $string)
          : $string;
}

